openapi: 3.0.1
info:
  title: Example JWT-Protected API
  description: A simple API to demonstrate JWT authentication with Swagger UI
  version: 1.0.0

# OpenAPI Spec: https://swagger.io/specification/
# Bearer Auth: https://swagger.io/docs/specification/v3_0/authentication/bearer-authentication/
# OpenAPI Generator Example: https://github.com/spec-first/connexion/tree/main/examples/jwt

paths:
  /:
    get:
      summary: Get a greeting
      responses:
        200:
          description: A greeting
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GreetingData'

  /listProducts:
    get:
      summary: Get a list of products
      responses:
        200:
          description: A list of products
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListProductsData'

  /getProduct:
    get:
      summary: Get a product by ID
      parameters:
        - name: id
          description: The ID of the product
          in: query
          required: true
          schema:
            type: integer
            example: 1
      responses:
        200:
          description: Product found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetProductResponse'
        400:
          description: Invalid product ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidID'

  /register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        201:
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserResponse'
        400:
          description: Registration failed

  /deactivateUser:
    get:
      summary: Deactivate a user
      security:
        - BearerAuth: [ ]  # use the same name as below
      parameters:
        - name: id
          description: The ID of the user
          in: query
          required: true
          schema:
            type: integer
            example: 1
      responses:
        200:
          description: User deactivated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeactivateUserResponse'
        400:
          description: Invalid user ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidID'

  /getUser:
    post:
      summary: Get a user by username and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetUserRequest'
      responses:
        200:
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserResponse'
        400:
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidCredentials'

  /updateUser:
    post:
      summary: Update a user
      security:
        - BearerAuth: [ ]  # use the same name as below
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        200:
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserResponse'
        400:
          description: Update failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateError'

  /login:
    post:
      summary: Authenticate and get a JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        200:
          description: Successfully authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        401:
          description: Unauthorized
        404:
          description: Unauthorized

  /placeOrder:
    post:
      summary: Add an order
      security:
        - BearerAuth: [ ]  # use the same name as below
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlaceOrderRequest'
      responses:
        200:
          description: Order placed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlaceOrderResponse'
        401:
          description: Unauthorized
        400:
          description: Order failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlaceOrderError'
        404:
          description: Unauthorized

  /cancelOrder:
    get:
      summary: Cancel an order
      security:
        - BearerAuth: [ ]  # use the same name as below
      parameters:
        - name: id
          description: The ID of the order
          in: query
          required: true
          schema:
            type: integer
            example: 1
      responses:
        200:
          description: Order cancelled successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CancelOrderResponse'
        400:
          description: Invalid order ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidID'

  /getOrder:
    post:
      summary: Add an order
      security:
        - BearerAuth: [ ]  # use the same name as below
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetOrderRequest'
      responses:
        200:
          description: Order placed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetOrderResponse'
        401:
          description: Unauthorized
        400:
          description: Order failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetOrderError'
        404:
          description: Unauthorized

  /protected:
    get:
      summary: Access protected data
      # specify that this request requires a JWT token
      security:
        - BearerAuth: [ ]  # use the same name as below
      responses:
        200:
          description: Protected data response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProtectedData'
        401:
          description: Unauthorized - missing or invalid JWT

components:
  securitySchemes:
    BearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    GreetingData:
      type: object
      properties:
        message:
          type: string

    ListProductsData:
      type: array
      items:
        $ref: '#/components/schemas/GetProductResponse'

    GetProductResponse:
      type: object
      description: Product data
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        category:
          type: string
        price:
          type: number
        slogan:
          type: string
        stock:
          type: integer
        created_at:
          type: string

    RegisterRequest:
      type: object
      properties:
        sid:
          type: string
        username:
          type: string
        password:
          type: string
          format: password
          description: a password field
        email:
          type: string
          description: a email field
      required:
        - sid
        - username
        - password

    DeactivateUserResponse:
      type: object
      properties:
        message:
          type: string

    GetUserRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
          format: password
          description: a password field
      required:
        - username
        - password

    GetUserResponse:
      type: object
      description: User data
      properties:
        id:
          type: integer
        sid:
          type: string
        username:
          type: string
        email:
          type: string
        password:
          type: string
        created_at:
          type: string

    UpdateUserRequest:
      type: object
      properties:
        id:
          type: integer
        sid:
          type: string
        username:
          type: string
        email:
          type: string
        password:
          type: string
        created_at:
          type: string
      required:
        - id

    LoginRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
          format: password
          description: a password field
      required:
        - username
        - password

    LoginResponse:
      type: object
      properties:
        token:
          type: string
          description: JWT token passed back to the client

    PlaceOrderRequest:
      type: object
      properties:
        user_id:
          type: integer
          description: The ID of the user
        product_id:
          type: integer
          description: The ID of the product
        quantity:
          type: integer
          description: The quantity of the product to order
        total_price:
          type: number
          description: The total price of the order
      required:
        - user_id
        - product_id
        - quantity

    PlaceOrderResponse:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        product_id:
          type: integer
        quantity:
          type: integer
        total_price:
          type: number
        created_at:
          type: string

    PlaceOrderError:
      type: object
      properties:
        message:
          type: string

    CancelOrderResponse:
      type: object
      properties:
        message:
          type: string

    GetOrderRequest:
      type: object
      properties:
        user_id:
          type: integer
        product_id:
          type: integer
      required:
        - user_id

    GetOrderResponse:
      type: array
      items:
        $ref: '#/components/schemas/PlaceOrderResponse'

    GetOrderError:
      type: object
      properties:
        message:
          type: string

    ProtectedData:
      type: object
      properties:
        message:
          type: string

    InvalidID:
      type: object
      properties:
        message:
          type: string

    InvalidCredentials:
      type: object
      properties:
        message:
          type: string

    UpdateError:
      type: object
      properties:
        message:
          type: string
