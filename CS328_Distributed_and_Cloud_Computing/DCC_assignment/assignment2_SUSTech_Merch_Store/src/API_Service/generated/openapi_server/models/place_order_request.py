from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class PlaceOrderRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, user_id=None, product_id=None, quantity=None, total_price=None):  # noqa: E501
        """PlaceOrderRequest - a model defined in OpenAPI

        :param user_id: The user_id of this PlaceOrderRequest.  # noqa: E501
        :type user_id: int
        :param product_id: The product_id of this PlaceOrderRequest.  # noqa: E501
        :type product_id: int
        :param quantity: The quantity of this PlaceOrderRequest.  # noqa: E501
        :type quantity: int
        :param total_price: The total_price of this PlaceOrderRequest.  # noqa: E501
        :type total_price: float
        """
        self.openapi_types = {
            'user_id': int,
            'product_id': int,
            'quantity': int,
            'total_price': float
        }

        self.attribute_map = {
            'user_id': 'user_id',
            'product_id': 'product_id',
            'quantity': 'quantity',
            'total_price': 'total_price'
        }

        self._user_id = user_id
        self._product_id = product_id
        self._quantity = quantity
        self._total_price = total_price

    @classmethod
    def from_dict(cls, dikt) -> 'PlaceOrderRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PlaceOrderRequest of this PlaceOrderRequest.  # noqa: E501
        :rtype: PlaceOrderRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user_id(self) -> int:
        """Gets the user_id of this PlaceOrderRequest.

        The ID of the user  # noqa: E501

        :return: The user_id of this PlaceOrderRequest.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: int):
        """Sets the user_id of this PlaceOrderRequest.

        The ID of the user  # noqa: E501

        :param user_id: The user_id of this PlaceOrderRequest.
        :type user_id: int
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def product_id(self) -> int:
        """Gets the product_id of this PlaceOrderRequest.

        The ID of the product  # noqa: E501

        :return: The product_id of this PlaceOrderRequest.
        :rtype: int
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id: int):
        """Sets the product_id of this PlaceOrderRequest.

        The ID of the product  # noqa: E501

        :param product_id: The product_id of this PlaceOrderRequest.
        :type product_id: int
        """
        if product_id is None:
            raise ValueError("Invalid value for `product_id`, must not be `None`")  # noqa: E501

        self._product_id = product_id

    @property
    def quantity(self) -> int:
        """Gets the quantity of this PlaceOrderRequest.

        The quantity of the product to order  # noqa: E501

        :return: The quantity of this PlaceOrderRequest.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity: int):
        """Sets the quantity of this PlaceOrderRequest.

        The quantity of the product to order  # noqa: E501

        :param quantity: The quantity of this PlaceOrderRequest.
        :type quantity: int
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")  # noqa: E501

        self._quantity = quantity

    @property
    def total_price(self) -> float:
        """Gets the total_price of this PlaceOrderRequest.

        The total price of the order  # noqa: E501

        :return: The total_price of this PlaceOrderRequest.
        :rtype: float
        """
        return self._total_price

    @total_price.setter
    def total_price(self, total_price: float):
        """Sets the total_price of this PlaceOrderRequest.

        The total price of the order  # noqa: E501

        :param total_price: The total_price of this PlaceOrderRequest.
        :type total_price: float
        """

        self._total_price = total_price
