项目技术报告   
 小组成员：谢毅，李昭毅，王梓硕，吴鎏亿
项目概述  
本项目是一个垃圾邮件识别器，旨在通过使用机器学习和深度学习技术，对输入的邮件进行预测，判断
其是否为垃圾邮件。该项目使用了 Python 编程语言，以及一系列开源库和工具。
 
项目目标  
本项目旨在开发一个垃圾邮件识别器，利用机器学习和深度学习技术，对邮件进行分类，判断其是否为
垃圾邮件。
 
项目结构  
项目主要分为以下几个部分：
1. 数据处理：  通过使用 jieba 库进行中文分词，并清洗数据以供模型训练使用。
2. 模型训练：  使用了深度学习模型（ Convolutional Neural Network ）对清洗后的邮件数据进行训
练，以识别垃圾邮件。
3. 用户界面：  使用tkinter 库创建了一个简单的用户界面，用户可以通过界面进行邮件输入、预测等
操作。
4. 其他辅助模块：  包括邮件预测器、状态栏、菜单等功能的实现。
 
使用方法  
1. 运行APP 模块启动用户界面 ( 在此之前要运行 suanfapingu 方法进行训练 ) 。
2. 在界面中使用文件菜单打开邮件文件。
3. 使用邮件菜单进行垃圾邮件的识别。
4. 关于菜单提供有关项目的帮助和关于信息。
 
代码结构  
项目主要包含以下模块：
1. MainFrame ： 项目的主窗口，包含顶部菜单、中心文本框和底部状态栏等组件。
2. CenText ： 中心文本框类，用于用户输入和显示文本信息。
3. RecognizerMail ： 垃圾邮件预测器，使用机器学习模型对邮件进行预测。
4. StatBar ： 底部状态栏，用于显示系统状态信息。
5. TopMenu ： 顶部菜单类，提供文件、邮件和帮助等功能的菜单。
6. shujupinggu ： 训练数据，得出训练集。7. 其他辅助模块：  包括数据处理、模型训练等功能的辅助模块，也可以进行测试代码的正确性。
 
关键模块的详细解释。  
RecognizerMail 部分  
当报告RecognizerMail 类时，我们将详细解释清洗邮件内容、特征提取和模型预测的过程。
RecognizerMail  
RecognizerMail 类是垃圾邮件预测器，其主要任务是接收用户输入的邮件内容，进行清洗、特征提取
和模型预测。以下是类中的主要方法：
__init__  
在初始化阶段，类加载了两个重要的组件：
1. 特征提取器（ Extractor ）：  使用  pickle 从预先训练好的文件中加载特征提取器。在这里，特征
提取器是一个  Tokenizer ，用于将邮件文本转换为数字序列。
2. 算法模型（ Estimator ）：  使用  pickle 从预先训练好的文件中加载深度学习或者机器学习模型。
这个模型在训练阶段使用了文本处理器和卷积神经网络。
clean_mail  
清洗邮件内容的方法，这是一个预处理步骤，用于确保输入的邮件数据与训练模型时相同的处理方式。
清洗过程包括以下步骤：
1. 保留中文：  使用正则表达式删除非中文字符。
2. 中文分词：  使用  jieba 进行中文分词。
3. 合并分词结果：  将分词结果合并为一个字符串。
predict  
模型预测的方法，用于对清洗后的邮件进行垃圾邮件的分类。主要包括以下步骤：
1. 清洗邮件内容：  调用  clean_mail 方法对邮件进行清洗。
2. 特征提取：  使用预加载的特征提取器（ Tokenizer ）将邮件转换为数字序列。
3. 模型预测：  使用加载的深度学习模型对数字序列进行预测。
4. 标签转换：  将预测的标签转换为可读性更强的结果，例如 " 垃圾邮件 " 或 " 正常邮件 " 。
使用方法  
用户可以通过调用  RecognizerMail 类的实例的  predict 方法，传递邮件内容，即可得到模型的预测
结果。
recognizer = RecognizerMail()
mail_content = "邮件内容 "
prediction = recognizer.predict([mail_content])
print(prediction)在RecognizerMail 类中，清洗邮件内容的步骤确保了输入数据与训练数据的处理方式一致，这有助于
模型的泛化能力。通过加载预训练的特征提取器和深度学习模型，我们实现了将用户输入的文本转换为
数字序列，并在模型上进行有效的预测。
整个  RecognizerMail 类的设计是为了使模型预测过程简化并与训练过程保持一致。这有助于确保模型
在实际应用中表现良好，同时也提供了方便的接口供用户使用。
 
机器学习训练部分  
在你提供的代码中，机器学习部分主要涉及到特征提取和分类器的训练，使用了朴素贝叶斯分类器
（Multinomial Naive Bayes ）作为算法模型。下面将详细解释机器学习部分的步骤：
特征提取  
1. 停用词处理：  从文件中读取中文停用词，用于在特征提取时过滤掉常见但无实际意义的词语。
2. 特征提取器：  使用  CountVectorizer 进行特征提取。这是一个基于词频统计的特征提取器，将每
封邮件表示为一个词频向量。
3. 获取特征词汇：  通过  get_feature_names_out() 方法获取特征词汇，即所有邮件中出现的不同
词汇。
算法模型训练  
1. 选择算法模型：  选择了朴素贝叶斯分类器（ Multinomial Naive Bayes ）。适用于文本分类问题，
特别是在处理离散的词袋模型时表现良好。
2. 模型训练：  使用  fit 方法对特征矩阵（邮件的词频向量）和对应的标签（垃圾邮件或正常邮件）
进行训练。模型通过观察邮件的词频特征来学习垃圾邮件和正常邮件之间的概率关系。
机器学习模型优势  
1. 快速训练：  相对于深度学习模型，朴素贝叶斯模型的训练速度较快。
2. 简单有效：  适用于文本分类等任务，尤其在数据量较小的情况下，表现良好。
3. 可解释性：  朴素贝叶斯模型的预测过程较为透明，能够提供可解释性的概率结果。
局限性和展望  
1. 局限性：  朴素贝叶斯模型在处理复杂关系和大规模数据时可能表现较差，无法捕捉词语之间的复杂
依赖关系。
2. 展望：  在数据量较大时，可以考虑使用深度学习模型来进一步提升性能。另外，模型的评估和调优
也是提高性能的关键。stopwords = [word.strip() for word in open('data/stopwords.txt', encoding='gbk', 
errors='ignore')]
extractor = CountVectorizer(stop_words=stopwords)
emails = extractor.fit_transform(emails)
features = extractor.get_feature_names_out()
estimator = MultinomialNB(alpha=0.01)
estimator.fit(emails, labels)机器学习模型部分是整个系统中的一个关键组成部分，它提供了一种简单而有效的方式来处理文本分类
问题。
 
深度学习训练部分  
文本处理  
在垃圾邮件识别中，文本处理是一个关键步骤，因为深度学习模型不能直接处理文本数据。通过使用  
keras 的 Tokenizer 类，我们能够将文本数据转换为计算机能够理解的数字序列。这个过程包括以下
步骤：
1. Tokenization （标记化）：  将文本拆分为单词或词汇单元，即进行中文分词。
2. 建立词汇表：  将标记映射到整数，并构建一个词汇表。
3. 文本到序列的转换：  将文本数据转换为整数序列，其中每个整数对应于词汇表中的一个标记。
模型架构的构建  
在模型架构的构建阶段，我们使用  keras 的 Sequential 模型，这是一种线性堆叠模型的方式。以下
是模型的主要层：
1. 嵌入层（ Embedding ）：  将整数序列转换为密集向量表示。这里使用 128 维的向量。
2. 卷积层（ Conv1D ）：  通过卷积操作捕获局部特征， 128 个过滤器，卷积核大小为 5 ，使用  ReLU 激
活函数。
3. 全局最大池化层（ GlobalMaxPooling1D ）：  提取最显著的特征，减少计算量。
4. 密集层（ Dense ）：  输出层，使用  Sigmoid 激活函数进行二元分类。
模型的编译与训练  
模型的编译阶段指定了损失函数、优化器和评估指标。在这个项目中，我们选择了二元交叉熵作为损失
函数， Adam 作为优化器，评估指标为准确度。
接着，我们使用训练集数据进行模型的训练。模型训练的时候，我们将数据集分为训练集和验证集，通
过反复迭代优化模型参数，提高模型的泛化性能。 model = Sequential()
 model.add(Embedding(input_dim=len(tokenizer.word_index) + 1, output_dim=128, 
input_length=data.shape[1]))
 model.add(Conv1D(128, 5, activation='relu'))
 model.add(GlobalMaxPooling1D())
 model.add(Dense(1, activation='sigmoid'))
model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])
model.fit(data, labels, epochs=10, validation_split=0.2)模型的存储  
训练完成后，我们使用  pickle 存储文本处理器和  keras 模型。文本处理器存储了对邮件内容进行数
字序列转换的规则，而深度学习模型则存储了网络结构和参数。
这样，训练好的模型和相应的文本处理器就可以在其他地方被调用和使用。
这里结合了深度学习的一般原理，包括文本处理、模型架构的构建、模型的编译与训练等步骤。
 
机器学习（朴素贝叶斯）与深度学习（卷积神经网络）对比  
1. 模型复杂度和表达能力：  
机器学习（朴素贝叶斯）：  朴素贝叶斯是一种基于概率的简单模型，它假设特征之间相互独立。在处理
文本分类等问题时，模型复杂度较低，对于简单的问题表现良好。
深度学习（卷积神经网络）：  卷积神经网络（ CNN ）是一种深度学习模型，通过多层卷积和池化层学习
输入数据的高级特征表示。它能够捕捉更复杂的特征关系，适用于处理大规模、复杂的数据。
2. 数据需求：  
机器学习（朴素贝叶斯）：  对于小规模的数据集，朴素贝叶斯模型表现较好。它在数据较少的情况下也
能进行有效的学习。
深度学习（卷积神经网络）：  深度学习模型通常需要大量的数据进行训练，以充分发挥其强大的表达能
力。在大规模数据集上，深度学习模型可以获得更好的性能。
3. 可解释性：  
机器学习（朴素贝叶斯）：  朴素贝叶斯的预测过程较为透明，它基于简单的概率统计，提供了可解释性
的结果。
深度学习（卷积神经网络）：  深度学习模型通常被认为是黑盒模型，其决策过程相对复杂，难以解释。
4. 适用场景：  
机器学习（朴素贝叶斯）：  适用于简单的文本分类、垃圾邮件识别等问题，尤其在数据较小的情况下表
现良好。
深度学习（卷积神经网络）：  适用于处理大规模、复杂的数据，例如图像识别、自然语言处理等任务。
 
项目展示  
如下pickle.dump(tokenizer, 
open('C:/Users/lenovo/PycharmProjects/aiproejct/model/tokenizer.pkl', 'wb'), 
protocol=pickle.HIGHEST_PROTOCOL)
model.save('C:/Users/lenovo/PycharmProjects/aiproejct/model/cnn_model.h5')对于一些邮件可能形成错误判断
错误可能原因总结  
1. 我们进行了对于数据集语料库的学习，经过调查发现数据集中不仅有一些错误标签，而且数据集样式过
于单一，基本都是市场上企业的招聘或者招商邮件，邮件信息不全所导致
2. 对于卷积层数我们只选了一层卷积，可能对于一些深度特征的识别并没有很准确。
改进方法  
1. 我们可以使用已经总结好的词向量如 word2rec 来提高准确率。
2. 可以尝试将卷积层数加大测试效果，看看对于某些词的深度特征是否可以识别的更加准确。
 项目总结  
着重实现部分  
1. 深度学习模型与机器模型的对比：  分别使用了朴素贝叶斯模型和卷积神经网络（ CNN ）作为模型，
比较了准确性以及时间成本。
2. 文本处理和特征提取：  通过使用  Tokenizer 对文本进行处理和转换，将邮件内容转换为计算机可
理解的数字序列，以便输入深度学习模型进行训练和预测。
技术挑战与解决方案  
1. 中文文本处理：  中文文本的处理相对复杂，需要利用  jieba 等工具进行分词和清洗，以适应深度
学习模型的训练。
2. 深度学习模型选择：  在选择深度学习模型时，考虑到卷积神经网络在文本分类任务中的优越性能，
选择了合适的模型结构。
3. 用户界面与后端整合：  将用户界面与模型预测的后端部分进行有效整合，保证了用户能够轻松地使
用系统进行邮件识别。
改进与展望  
1. 性能优化：  进一步优化深度学习模型，提高模型的训练速度和预测准确性。
2. 更多功能：  添加更多实用的功能，例如邮件分类的可视化展示、用户历史记录等，提升用户体验。
结论  
本项目通过结合深度学习技术和机器学习，成功开发了一个垃圾邮件识别器。项目从数据处理、模型训
练、用户界面设计等多个层面进行了实现，未来我们将继续优化系统性能，丰富功能，并致力于提高垃
圾邮件识别的准确性和普适性。
 
 注
本项目使用了多种开源工具和库，包括 jieba 、tkinter 、scikit-learn 和keras 等。感谢开源社区
提供的丰富资源。
 
 
  