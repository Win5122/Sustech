项目说明  
背景介绍  
项目背景与研究内容  
小组成员与分工  
组长：朱家润
组员：冯星洋、范书豪、刘乐平
朱家润： UNet 与 UNet++ 模型编写
冯星洋：对中、去除离群点算法编写， 3D 重建代码改写与优化
刘乐平： UNet 模型参数调优
范书豪： UNet++ 模型参数调优
主要任务  
使用经人工分割的眼前节 OCT 环扫图像训练、测试、应用模型，并将分割后的图像应用于三维重建任
务。
项目实现  
技术路线  分割  
将经人工分割的眼前节 OCT 环扫图分为 train （训练集）和 val （验证集），训练 UNet/UNet++ 模型，并
得到相应结果。
UNet:  
UNet 模型由左侧实现下采样的解码器、右侧实现上采样的编码器，以及中间的跳跃连接层组成。
UNet++:  
UNet++ 模型由多个不同深度的 UNet 模型叠加而成。 UNet++ 提供了一个可剪枝的网络结构，我们可以人
为考察各输出层的的效果后在 “ 分割精度 ” 和 “ 运行性能 ” 中做出取舍，选取特定深度的模型。
图像处理  
图像处理部分由图像对中和删除离群点两个步骤组成。图像对中  
寻找图像左右特征点，求平均并以此作为图像实际中轴。通过图像平移等操作将实际中轴与图像中心对
齐。
删除离群点  
将遮罩图像的白色像素点建图，并为像素点相邻的点连边。对各个子连通图统计节点个数，获得区域面
积。保留面积前二大的区域，并删除其他区域。
3 维重建  
将处理后图像按顺序打包为 3 维 numpy 数组，并通过笛卡尔坐标转化为柱坐标的方式将 numpy 数组各像
素点还原至环扫前位置。利用线性插值等插值算法，填补变换后的空白位置。利用 pyvista 等 python 包，
实现 3 维可视化展示。项目结构  CS103_Project                       # 根目录 
├── imgs                            # 保存 README.md 所需的图片 
├── MS_dataset     
 ├── train                       # 训练数据集 
 └── val                         # 验证数据集 
├── Re3D           
 ├── build                       # 3 维重建与展示 
 └── transform                   # 图像对中与删除离群点 
├── UNet  
 ├── checkpoints                 # 用于保存存档点 
 ├── imgs                        # 用于保存分割后图像 
 ├── dataset.py                  # 数据集 
 ├── hyper_parameters.py         # 超参数与常量 
 ├── model.py                    # UNet 模型 
 ├── test.py                     # 测试模型 
 ├── train.py                    # 训练模型 
 └── utils.py                    # 工具包 
├── UNetPP  
 ├── checkpoints  
 ├── imgs  
 ├── dataset.py  
 ├── hyper_parameters.py  
 ├── model.py                    # UNet++ 模型 
 ├── train.py  
 └── utils.py  
├── README.md                       # 项目说明 
└── requirements.txt                # 项目环境 
运行方法  
1. 通过 requirement.txt 配置项目环境。
2. 将数据放入 MS_dataset 的 train 与 val 中（由于保密等相关原因，本小组不在此预置数据）。 注：同
一组 OCT 图像应当位于同一个二级文件夹下，为保证 3 维重建的稳定性，请务必确保环扫顺序与文
件命名顺序相匹配。
3. 将hyper_parameters.py 中的 LOAD_MODEL 项改为 False 。
4. 运行 train.py ，程序会对训练集运行 10 个循环，运行完毕后会在 checkpoints 目录下生成
checkpoint.pth.tar 文件（存档点），并运行验证集验证准确度，在 imgs 目录下生成运行结果（原
始图像 + 遮罩图像 + 高亮图像）。
5. 如需继续训练，将 LOAD_MODEL 项改为 True （从存档点加载模型），然后重复运行第 4 步。
6. 通过修改 MSDataset.getItem() 中的 mask_target 布尔数组为 <150 或>=150 and <170 或>=170 后
从第 3 步重新运行，实现对眼前节不同部分的分类。
7. 将各部分图像分类取出并存入特定文件夹中。
8. 修改 transform.py 中的 PATH 和 SAVE 参数与 build.py 中相应参数以匹配第 7 步的文件夹路径。
9. 运行 transform.py/build.py 以查看结果。 注： transform.py 仅实现了对虹膜图像的对中与删除离群
点，若需同步应用于其他部分，需要相应代码改进。